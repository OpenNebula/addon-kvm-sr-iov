#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2015, The Centre for High Performance Computing (South Africa)   #
# Author: David Macleod							     #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#                                                                            #
# Adapted from the OpenNebula Project's KVM VMM shutdown script              #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#--------------------------------------------------------------------------- #

source $(dirname $0)/kvmrc
source $(dirname $0)/../../scripts_common.sh

count=0

deploy_id=$1

shutdown_command="virsh --connect $LIBVIRT_URI shutdown $deploy_id"

sriov_ifaces=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" | wc -l`
if [ $sriov_ifaces -gt 0 ]; then
#Search for VF interfaces
  interface=0
  while [ $interface -lt $sriov_ifaces ]
  do
    interface=$[$interface + 1]
#Get VF address info
    bus=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f4 | sed "$interface q;d"`
    slot=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f6 | sed "$interface q;d"`
    function=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f8 | sed "$interface q;d"`

    if [ `expr length $function` -eq 3 ]; then
        function=0x0$(echo $function | cut -c 3-)
    fi

    mellanox_bus=`echo $bus | cut -c 3-`
    mellanox_slot=`echo $slot | cut -c 3-`
    mellanox_function=`echo $function | cut -c 4-`
    mellanox_address[$interface]="0000:"$mellanox_bus":"$mellanox_slot"."$mellanox_function

#Get VF map info
    vf_map_file=`grep -R "$bus $slot $function" $VF_MAPS_PATH | cut -d ':' -f1`
    root_iface[$interface]=`echo $vf_map_file | rev | cut -d '/' -f1 | rev`
    vf_iface[$interface]=`cat $vf_map_file | grep "$bus $slot $function" -n | cut -d ':' -f1`
    vf_iface[$interface]=$[${vf_iface[$interface]} - 1]
  done
fi

#If VM does not have ACPI enabled do not try to use it, destroy instead shutdown
if [ "x$CANCEL_NO_ACPI" = "xyes" ]; then
    virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep -q acpi

    if [ "x$?" != "x0" ]; then
       shutdown_command="virsh --connect $LIBVIRT_URI destroy $deploy_id"
    fi
fi

if [ -z "$SHUTDOWN_TIMEOUT" ]; then
    TIMEOUT=120
else
    TIMEOUT=$SHUTDOWN_TIMEOUT
fi

HALF_LOOP=$(($TIMEOUT/2))

function monitor
{
    # Issue another shutdown to cover occasional libvirt lack of attention
    if [ "$count" -eq "$HALF_LOOP" ]
    then
        eval $shutdown_command
    fi

    let count=count+1

    export count

    virsh --connect $LIBVIRT_URI --readonly dominfo $deploy_id > /dev/null 2>&1

    [ "x$?" != "x0" ]
}

exec_and_log "$shutdown_command" \
    "Could not shutdown $deploy_id"

retry $TIMEOUT monitor

force_shutdown "$deploy_id" \
    "virsh --connect $LIBVIRT_URI destroy $deploy_id"

#Remove VF lock
if [ $sriov_ifaces -gt 0 ]; then
  interface=0
  while [ $interface -lt $sriov_ifaces ]
  do
    interface=$[$interface + 1]
    if [ $DRIVER_MODE == "mlnx_ofed2" ]; then
      HCA_DEV=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep device | awk '{print $2}'`
      HCA_PORT=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep port | awk '{print $2}'`
      sudo $(dirname $0)/sbin/wr_guid.sh clear_guid ${vf_iface[$interface]} $HCA_DEV $HCA_PORT ${mellanox_address[$interface]}
    fi
    rm /dev/shm/vf_interfaces/${root_iface[$interface]}/${vf_iface[$interface]}
  done
fi

sleep 4

