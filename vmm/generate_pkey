#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2016-2017, CSIR Centre for High Performance Computing            #
# Author: David Macleod, Israel Tshililo, Bryan Johnston                     #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

## Hooks arguments
dirname=$(dirname $0)
ID=$1
PREV_STATE=$2
PREV_LCM_STATE=$3
TEMPLATE=$4

#####  Decode the Template from base64
decodeTmp=$(echo $TEMPLATE | base64 -d) 
neatTmp=$(echo $decodeTmp | xmllint --format -) 


#### Extracts the BRIDGE and VLAN_ID froms the NICs found on the Template files
bridge_vlan2=$(echo "$neatTmp" | awk '/NIC/, /\/NIC\>/ {gsub(/\!\[CDATA\[/, ""); gsub(/\]\]/, "");   print} {}' | grep -e AR_ID -e BRIDGE -e VLAN_ID | sed -e "s/<//g" | cut -d ">" -f1,2 |  sed -e "s/>/=/g" | awk '/AR_ID/{if (NR!=1)print "";next}{printf "%s ",$0}END{print "";}' | sed -e "s/       /-/g")

## Name deploy_id ID
deploy_id="one-$ID"

## Loop counters
counter=0
vcounter=0
	
for NIC in $bridge_vlan2; do 

    ## Check for VLANs
    VlanInfo=$(echo "$NIC" | grep "VLAN_ID")
    name_bridge=$(echo "$NIC" | cut -d "-" -f1 | cut -d "=" -f2)
    vlan_id="no_vlan"

    if [ -z $VlanInfo]; then
      ## If bridges without a VLAN assigned
    	vlan_id="no_vlan"
    else
      ## Get the VLAN ID
        vlan_id=$(echo "$NIC" | cut -d "-" -f2| cut -d "=" -f2)
    fi
   
    ## Checks for virtual functions (sriov)
    vvsriov=$(echo "$name_bridge" | cut -c 1-5)
    if [ "$vvsriov" = "sriov" ]; then
        
        ## Extract bus slot and function addresses
        vf_pos=$[vcounter + 1]
        bus=`virsh -c qemu:///system dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f4 | sed "$vf_pos q;d" | cut -d "x" -f2`
        slot=`virsh -c qemu:///system dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f6 | sed "$vf_pos q;d" | cut -d "x" -f2`
        function=`virsh -c qemu:///system dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f8 | sed "$vf_pos q;d" | cut -c 3`
        #Build vf address
        address="0000:$bus:$slot.$function"

        ## Get the Device and Port from the bridge
        ibDev=$(echo "$name_bridge" | cut -d "_" -f2)
        HCA_DEV=$(cat "$dirname/vf_maps/"$ibDev"_ofed" | grep device | cut -d " " -f2)
        HCA_PORT=$(cat "$dirname/vf_maps/"$ibDev"_ofed" | grep port | cut -d " " -f4)

        ## Naming sudo files to apply_pkey_map on

        ## Conditions for assigning VLAN IDs
        if [ "$vlan_id" == "no_vlan" ]; then
          #If no VLAN is specified map the pkey to the hosts default
            sudo "$dirname/sbin/wr_pkey_map.sh" $address $HCA_DEV $HCA_PORT 0 0
            sudo "$dirname/sbin/wr_pkey_map.sh" $address $HCA_DEV $HCA_PORT 1 "none"
        else
          #If a VLAN is specified calculate its equivalent pkey
            
            #01 Convert to binary
            pkey_bin=`echo "obase=2;$vlan_id" | bc`
            pkey_len=`echo $pkey_bin | wc -m`

            #02 Check if the pkey has full memebership
            if [ $pkey_len -gt 15 ]; then
              #If the pkey has full membership no correction is applied and the key is converted to hex
                pkey_full=`printf '%x\n' "$((2#$pkey_bin))"`
                pkey_part=$pkey_full
            else
              #If the pkey is not specifed with full membership then generate the pkey with full membership
                pkey_diff=$[16 - pkey_len]
                position=0
                pkey_full=1
                while [ $position -lt $pkey_diff ] 
                do
                  position=$[$position + 1]
                  pkey_full="${pkey_full}0"
                done
                #Convert the binary pkey to hex
                pkey_full_hex=`printf '%x\n' "$((2#$pkey_full$pkey_bin))"`
                pkey_part_hex=`printf '%x\n' "$((2#$pkey_bin))"`
                #Add 0s to the hex pkeys to correct if necassary
                pkey_part_hex_len=`echo $pkey_part_hex | wc -m`
                if ! [ $pkey_part_hex_len -eq 5 ]; then
                  pkey_hex_diff=$[5 - pkey_part_hex_len]
                  position=0
                  while [ $position -lt $pkey_hex_diff ]
                  do
                    position=$[$position + 1]
                    pkey_part_hex_fix="0$pkey_part_hex_fix"
                  done
                fi
                pkey_full="$pkey_full_hex"
                pkey_part="$pkey_part_hex_fix$pkey_part_hex"
            fi
            #03 Add 0x to the pkeys to make them compatible with format the IB system stores them in
            pkey_full="0x"$pkey_full
            pkey_part="0x"$pkey_part
            #04 Find all the pkeys allocated to the system and search for a match
            num_files=`ls /sys/class/infiniband/mlx4_0/ports/1/pkeys/ | wc -l`
            key_found=0
            position=0
            while [ $position -lt $num_files ]
            do
                pkey=`cat /sys/class/infiniband/mlx4_0/ports/1/pkeys/$position`
                #If a match is found stop searching and record its position for mapping
                if [ "$pkey" == "$pkey_full" ] || [ "$pkey" == "$pkey_part" ]; then
                    map_pos=$position
                    position=$num_files
                    key_found=1
                fi
                position=$[$position + 1]
           done
           #05 If VLAN specified   
           if [ $key_found -eq 1 ]; then 
               #If a pkey match was found apply the vf map
               sudo "$dirname/sbin/wr_pkey_map.sh"  $address $HCA_DEV $HCA_PORT 1 0
               sudo "$dirname/sbin/wr_pkey_map.sh"  $address $HCA_DEV $HCA_PORT 0 $map_pos
           else
               #If the requested pkey was not found block the VM's IB port
               sudo "$dirname/sbin/wr_pkey_map.sh"  $address $HCA_DEV $HCA_PORT 1 "none"
               sudo "$dirname/sbin/wr_pkey_map.sh"  $address $HCA_DEV $HCA_PORT 0 "none"
           fi

        fi
    	vcounter=$((vcounter+1))
    fi

   counter=$((counter+1))
done

exit 0
