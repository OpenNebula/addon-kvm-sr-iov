#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2013, CSIR Centre for High Performance Computing                 #
# Author: David Macleod                                                      #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#                                                                            #
# Adapted from the OpenNebula Project's KVM VMM migrate_local script         #
# Copyright 2002-2013, OpenNebula Project (OpenNebula.org), C12G Labs        #
#--------------------------------------------------------------------------- #

source $(dirname $0)/kvmrc
source $(dirname $0)/../../scripts_common.sh

# Executes a command, if it fails returns error message
# If a second parameter is present it is used as the error message when
# the command fails
function exec_and_log_no_exit
{
    message=$2

    EXEC_LOG_ERR=`$1 2>&1 1>/dev/null`
    EXEC_LOG_RC=$?

    if [ $EXEC_LOG_RC -ne 0 ]; then
        log_error "Command \"$1\" failed: $EXEC_LOG_ERR"

        if [ -n "$2" ]; then
            error_message "$2"
        else
            error_message "Error executing $1: $EXEC_LOG_ERR"
        fi
    fi
    exit_code=$EXEC_LOG_RC
}

deploy_id=$1
dest_host=$2
src_host=$3

  vm_path=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id  | grep "source file" | cut -d "'" -f2 | rev | cut -c 7- | rev | sed "1 q;d"`
  sriov_ifaces=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" | wc -l`
  if [ $sriov_ifaces -gt 0 ]; then
#Search for VF interfaces
    no_free_vf=false
    interface=0
    while [ $interface -lt $sriov_ifaces ]
    do
      interface=$[$interface + 1]
#Lookup VF interface address info
      bus=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f4 | sed "$interface q;d"`
      slot=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f6 | sed "$interface q;d"`
      function=`virsh --connect $LIBVIRT_URI dumpxml $deploy_id | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f8 | sed "$interface q;d"`

      if [ `expr length $function` -eq 3 ]; then
          function=0x0$(echo $function | cut -c 3-)
      fi
#Lookup VM VF locations
      vf_map_file=`grep -R "$bus $slot $function" $VF_MAPS_PATH | cut -d ':' -f1`
      root_iface[$interface]=`echo $vf_map_file | rev | cut -d '/' -f1 | rev`
      vf_iface[$interface]=`cat $vf_map_file | grep "$bus $slot $function" -n | cut -d ':' -f1`
      vf_iface[$interface]=$[${vf_iface[$interface]} - 1]
      vf_mac[$interface]=`cat /tmp/vf_interfaces/${root_iface[$interface]}/${vf_iface[$interface]}`
      wspace="          "
      wspace1="                 "
      wspace2="                         "
#Write SR-IOV device stanza
      discard=$(echo "$wspace<hostdev mode='subsystem' type='pci'>
$wspace1<source>
$wspace2<address bus='$bus' slot='$slot' function='$function'/>
$wspace1</source>
$wspace</hostdev>" > "$vm_path"rem_device."$[$interface - 1]")

      rem_root_iface=${root_iface[$interface]}
      rem_vf=$[$interface - 1]
      rem_mac=${vf_mac[$interface]}
#Acquire destination VF locks
      remote_vf=`ssh $dest_host "$(dirname $0)/wr_dev $rem_root_iface $vm_path $rem_vf $rem_mac"`
      found_vf[$interface]=`echo $remote_vf | cut -d ' ' -f4`
      if [ ${found_vf[$interface]} -eq -1 ]; then
        no_free_vf=true
      fi
    done

    if $no_free_vf ; then
#If there are not enough VFs free at the destination
      interface=0
      while [ $interface -lt $sriov_ifaces ]
      do
        interface=$[$interface + 1] 
#Release VF locks on destination
	if [ ${found_vf[$interface]} -gt -1 ]; then
          ssh $dest_host "rm /tmp/vf_interfaces/${root_iface[$interface]}/${found_vf[$interface]}"
          rm $vm_path"device."$[$interface - 1]
        fi
        rm $vm_path"rem_device."$[$interface - 1]
      done
#Abort migration
      error_message "There are not enough free VFs on $dest_host to complete migration. Aborting!"
      exit -1
    else
#If there are enough VFs at destnation
      interface=0
      while [ $interface -lt $sriov_ifaces ]
      do
#Detach VFs at source
	interface=$[$interface + 1]
	command=`echo "--connect "$LIBVIRT_URI" detach-device "$deploy_id" "$vm_path"rem_device."$[$interface - 1]`
        discard=$(virsh $command)

	if [ $DRIVER_MODE == "mlnx_ofed2" ]; then
          HCA_DEV=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep device | awk '{print $2}'`
          HCA_PORT=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep port | awk '{print $2}'`
	  sudo $(dirname $0)/sbin/wr_guid.sh clear_guid ${vf_iface[$interface]} $HCA_DEV $HCA_PORT
	fi
	
	sleep 3
      done
#Attempt migration
        virsh --connect $QEMU_PROTOCOL://$src_host/system \
        migrate --live $deploy_id $QEMU_PROTOCOL://$dest_host/system

      if [ $exit_code -eq 0 ]; then
#If migration is sucessful
        if [ $sriov_ifaces -gt 0 ]; then
          interface=0
          while [ $interface -lt $sriov_ifaces ]
          do
#Attach VFs at destination
            interface=$[$interface + 1]

	    if [ $DRIVER_MODE == "mlnx_ofed2" ]; then
              HCA_DEV=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep device | awk '{print $2}'`
              HCA_PORT=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep port | awk '{print $2}'`
              ssh $dest_host "sudo $(dirname $0)/sbin/wr_guid.sh ${vf_mac[$interface]} ${found_vf[$interface]} $HCA_DEV $HCA_PORT"
            fi

            command=`echo "virsh --connect "$LIBVIRT_URI" attach-device "$deploy_id" "$vm_path"device."$[$interface - 1]`
            discard=$(ssh $dest_host "$command")
#Release VF locks at source
	    rm /tmp/vf_interfaces/${root_iface[$interface]}/${vf_iface[$interface]}
            rm $vm_path"rem_device."$[$interface - 1]
            rm $vm_path"device."$[$interface - 1]
            sleep 3	
          done
        fi
      else
#If migration fails
	if [ $sriov_ifaces -gt 0 ]; then
          interface=0
          while [ $interface -lt $sriov_ifaces ]
          do
#Reattach VFs at source
            interface=$[$interface + 1]
	    if [ $DRIVER_MODE == "mlnx_ofed2" ]; then
              HCA_DEV=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep device | awk '{print $2}'`
              HCA_PORT=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep port | awk '{print $2}'`
              sudo $(dirname $0)/sbin/wr_guid.sh ${vf_mac[$interface]} ${vf_iface[$interface]} $HCA_DEV $HCA_PORT
            fi
            command=`echo "--connect "$LIBVIRT_URI" attach-device "$deploy_id" "$vm_path"rem_device."$[$interface - 1]`
            discard=$(virsh $command)
#Release VF locks at destination
            ssh $dest_host "rm /tmp/vf_interfaces/${root_iface[$interface]}/${found_vf[$interface]}"
            rm $vm_path"rem_device."$[$interface - 1]
            rm $vm_path"device."$[$interface - 1]
            sleep 3
          done
        fi
        exit $exit_code
      fi
    fi
  else
    virsh --connect $QEMU_PROTOCOL://$src_host/system \
        migrate --live $deploy_id $QEMU_PROTOCOL://$dest_host/system
  fi

