#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                #
# Author: David Macleod & Israel Tshililo                                   #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

DRIVER_PATH=$(dirname $0)

source $DRIVER_PATH/kvmrc
source $DRIVER_PATH/../../scripts_common.sh

function exec_and_log_no_exit
{
    message=$2

    EXEC_LOG_ERR=`$1 2>&1 1>/dev/null`
    EXEC_LOG_RC=$?

    if [ $EXEC_LOG_RC -ne 0 ]; then
        log_error "Command \"$1\" failed: $EXEC_LOG_ERR"

        if [ -n "$2" ]; then
            error_message "$2"
        else
            error_message "Error executing $1: $EXEC_LOG_ERR"
        fi
    fi
    exit_code=$EXEC_LOG_RC
}

DEPLOY_ID=$1
FILE=$2

VM_ID=$4
DS_ID=$5

vm_path=`echo "$FILE" | rev | cut -c 11- | rev | sed "1 q;d"`

if [ -f "$FILE" ]; then
    log "Moving old checkpoint file $FILE"
    epoch=`date +%s`

    exec_and_log "mv $FILE $FILE.$epoch" \
        "Could not move $FILE to $FILE.$epoch"
fi

touch $FILE
chmod 666 $FILE

  sriov_ifaces=`virsh --connect $LIBVIRT_URI dumpxml $DEPLOY_ID | grep "<hostdev" | wc -l`
  if [ $sriov_ifaces -gt 0 ]; then
#Search for VF interfaces
    echo "$DEPLOY_ID" > $vm_path/domain
    interface=0
    while [ $interface -lt $sriov_ifaces ]
    do
      interface=$[$interface + 1]
#Lookup VF interface address info
      bus=`virsh --connect $LIBVIRT_URI dumpxml $DEPLOY_ID | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f4 | sed "1 q;d"`
      slot=`virsh --connect $LIBVIRT_URI dumpxml $DEPLOY_ID | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f6 | sed "1 q;d"`
      function=`virsh --connect $LIBVIRT_URI dumpxml $DEPLOY_ID | grep "<hostdev" -A 3 | grep "address" | cut -d "'" -f8 | sed "1 q;d"`

      if [ `expr length $function` -eq 3 ]; then
          function=0x0$(echo $function | cut -c 3-)
      fi

      mellanox_bus=`echo $bus | cut -c 3-`
      mellanox_slot=`echo $slot | cut -c 3-`
      mellanox_function=`echo $function | cut -c 4-`
      mellanox_address[$interface]="0000:"$mellanox_bus":"$mellanox_slot"."$mellanox_function

#Lookup VM VF locations
      vf_map_file=`grep -R "$bus $slot $function" $VF_MAPS_PATH | cut -d ':' -f1`
      root_iface[$interface]=`echo $vf_map_file | rev | cut -d '/' -f1 | rev`
      vf_iface[$interface]=`cat $vf_map_file | grep "$bus $slot $function" -n | cut -d ':' -f1`
      vf_iface[$interface]=$[${vf_iface[$interface]} - 1]

      wspace="          "
      wspace1="                 "
      wspace2="                         "
#Write SR-IOV device stanza
      discard=$(echo "$wspace<hostdev mode='subsystem' type='pci' managed='yes'>
$wspace1<source>
$wspace2<address bus='$bus' slot='$slot' function='$function'/>
$wspace1</source>
$wspace</hostdev>" > "$vm_path"device."$[$interface - 1]")

#Detach VF
      discard=$(virsh --connect $LIBVIRT_URI detach-device $DEPLOY_ID $vm_path"device."$[$interface - 1])
      sleep 3
    done
  fi

#Attempt save
exec_and_log_no_exit "virsh --connect $LIBVIRT_URI save $DEPLOY_ID $FILE" \
    "Could not save $DEPLOY_ID to $FILE"

if [ $exit_code -eq 0 ]; then
#If saved
  if [ $sriov_ifaces -gt 0 ]; then
#Record root device and release VF locks
    interface=0
    while [ $interface -lt $sriov_ifaces ]
    do
      interface=$[$interface + 1]
      if [ $DRIVER_MODE == "mlnx_ofed2" ]; then
        HCA_DEV=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep device | awk '{print $2}'`
        HCA_PORT=`cat $VF_MAPS_PATH/${root_iface[$interface]}_ofed | grep port | awk '{print $2}'`
        sudo $(dirname $0)/sbin/wr_guid.sh clear_guid ${vf_iface[$interface]} $HCA_DEV $HCA_PORT ${mellanox_address[$interface]}
      fi
      guid=`cat /dev/shm/vf_interfaces/${root_iface[$interface]}/${vf_iface[$interface]}`
      discard=$(echo "${root_iface[$interface]},$guid" > $vm_path"device."$[$interface - 1])
      rm /dev/shm/vf_interfaces/${root_iface[$interface]}/${vf_iface[$interface]}
    done
  fi
else
#If failed reattach VFs
  if [ $sriov_ifaces -gt 0 ]; then
    rm $vm_path/domain
    interface=0
    while [ $interface -lt $sriov_ifaces ]
    do
      interface=$[$interface + 1]
      discard=$(virsh --connect $LIBVIRT_URI attach-device $DEPLOY_ID $vm_path"device."$[$interface - 1])
      rm $vm_path"device."$[$interface - 1]
    done
  fi
  exit $exit_code
fi

#-------------------------------------------------------------------------------
# Handle DRV_MESSAGE coming from stdin
#-------------------------------------------------------------------------------

# Exit if no stdin data is available
if [ -t 0 ]; then
    exit 0
fi

# There is data in stdin, read it
DRV_MESSAGE=$(cat)

# The data is the driver message. Extracting the System DS TM_MAD
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
TM_MAD=$(echo "$DRV_MESSAGE" | $XPATH /VMM_DRIVER_ACTION_DATA/DATASTORE/TM_MAD)

# If there is a specific hook for this TM_MAD call it:
SAVE_TM_FILE="${DRIVER_PATH}/save.${TM_MAD}"

if [ -x "$SAVE_TM_FILE" ]; then
    echo "$DRV_MESSAGE" | $SAVE_TM_FILE $@
fi
